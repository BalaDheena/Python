
import pandas as pd
import glob
import os
import re
import math
 
 
 
def find_max_float_length(float_values):
    max_length_before_point = 0
    max_length_after_point = 0
    for value in float_values:
        if value is not None and not math.isnan(value):
            str_value = str(value)
            if '.' in str_value:
                before_point, after_point = str_value.split('.')
                max_length_before_point = max(max_length_before_point, int(len(before_point)))
                max_length_after_point = max(max_length_after_point, int(len(after_point)))
            else:
                max_length_before_point = max(max_length_before_point, len(str_value))
    return max_length_before_point, max_length_after_point
 
 
folder_path = input("Plese enter thr folder path:")
output_folder = r'C:\Users\balamurugan.d\Downloads\New folder (6)'  # Output folder path
files = glob.glob(folder_path + '/*.csv') + glob.glob(folder_path + '/*.xlsx') + glob.glob(folder_path + '/*.txt')  # Update to include Excel files
 
 
 
file_info = {}  # Dictionary to store file information
 
 
print("Profiling Started")
for file in files:
    if file.endswith('.csv'):
        df = pd.read_csv(file, header=None, low_memory=False, on_bad_lines='skip')
    elif file.endswith('.xlsx'):
        df = pd.read_excel(file, header=None)
    elif file.endswith('.txt'):
        with open(file, 'r') as txt_file:
            lines = txt_file.readlines()
        df = pd.DataFrame(lines)
    else:
        continue
    #default_value = 0
    #df=df.fillna(default_value).astype(int)
    #df.fillna(value=1, inplace=True)
    #df.dropna(axis=1).values
    #df=df.interpolate(method="linear")
    #df=pd.strip(" ")
    #df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
 
 
    
    count_rows = len(df)
    columns = df.columns
    column_data_types = df.dtypes.to_dict()  # Get data types as a dictionary
    max_length_columns = {}
    precision_columns = {}
    integer_columns = {}  # New dictionary to store integer part length for float64 columns
    max_values = {}  # Dictionary to store maximum values
    min_values = {}  # Dictionary to store minimum values
    Datetype1 = {}  # Dictionary to store maximum values as formatted dates
    Datetype2 = {}  # Dictionary to store minimum values as formatted dates
 
 
 
    for column in columns:
        data_type = column_data_types[column]
        if df[column].isnull().all():
            data_type = 'NULL '
            max_length_columns[column] = data_type
        if data_type == 'object':
            # Check if it matches the date format with alphabets in various positions
            if df[column].str.match(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{7}Z').any():
                data_type = 'DATETIME(WITH Alphabets with start year)'
            elif df[column].str.match(r'd{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2}\.\d{7}Z').any():
                data_type = 'DATETIME(WITH Alphabets with start Day)'
            elif df[column].str.match(r'\d{4}-\d{2}-\d{2}\d{2}:\d{2}:\d{2}\.\d{7}Z').all():
                data_type = 'DATETIME(WITH End alphabet start year)'
            elif df[column].str.match(r'\d{2}-\d{2}-\d{4}\d{2}:\d{2}:\d{2}\.\d{7}Z').all():
                data_type = 'DATETIME(WITH End alphabet start Day)'
            elif df[column].str.match(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{7}').all():
                data_type = 'DATETIME(WITH  Start alphabet start year)'
            elif df[column].str.match(r'\d{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2}\.\d{7}').all():
                data_type = 'DATETIME(WITH  Start alphabet start Day )'
            elif df[column].str.match(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}').any():
                data_type = 'DATETIME(WITH YEAR START) '
            elif df[column].str.match(r'\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}').any():
                data_type = 'DATETIME(WITH DAY START) '
            elif df[column].str.match(r'\d{2}-\d{2}-\d{4}').all():
                data_type = 'DATE'
            elif df[column].str.match(r'\d{4}-\d{2}-\d{2}').all():
                data_type = 'DATE'
            else:
                #max_values[column] = str(df[column].max())  # Store maximum value
                #min_values[column] = str(df[column].min())
                max_length = df[column].astype(str).str.len().max()
                min_length = df[column].astype(str).str.len().min()
                data_type = f"VARCHAR({max_length}) (Max Length: {max_length}, Min Length: {min_length}), "
            max_length_columns[column] = data_type
 
        elif data_type == 'None':
            max_length = df[column].isnull().all()
            data_type = 'unknown'
 
        elif data_type == 'int64':
            df[column].fillna(value=1, inplace=True)
            integer_length = df[column].apply(lambda x: len(str(x))).max()
            if integer_length < 10:
                data_type = 'INT'
            else:
                data_type = 'BIGINT'
            max_length_columns[column] = data_type
            max_values[column] = df[column].max()  # Store maximum value
            min_values[column] = df[column].min()  # Store minimum value
 
        elif data_type == 'float64':
            float_values=df[column].dropna().values
            float_values = df[column].values  # Get non-null float values
            max_len_before, max_len_after = find_max_float_length(float_values)
            integer_length = max_len_before
            precision_length = max_len_after
            precision_columns[column] = precision_length
            integer_columns[column] = integer_length
            max_values[column] = df[column].max()  # Store maximum value
            min_values[column] = df[column].min()  # Store minimum value
            max_value = df[column].max()
            if precision_length == 1 and re.match(r'^\d+\.0+$', str(max_value)) and  integer_length<10:
                data_type = 'INT(NULL)'
            elif precision_length == 1 and re.match(r'^\d+\.0+$', str(max_value)) and  integer_length>10:
                data_type = 'BIGINT(NULL)'
            else:
                    data_type = f'NUMERIC({integer_length}, {precision_length})'
            max_length_columns[column] = data_type
        # elif data_type == 'float64':
        #     float_values = df[column].dropna().values
        #     max_len_before, max_len_after = find_max_float_length(float_values)
        #     integer_length = max_len_before
        #     precision_length = max_len_after
        #     precision_columns[column] = precision_length
        #     integer_columns[column] = integer_length
        #     max_value = df[column].max()
        #     # Check if values before the decimal point are integers and values after the decimal point are all zeros
        #     if re.match(r'^\d+\.0+$', str(max_value)):
        #         data_type = 'INT' if integer_length < 10 else 'BIGINT'
        #     else:
        #             data_type = f'NUMERIC({integer_length}, {precision_length})'
        #             max_length_columns[column] = data_type
        #             max_values[column] = max_value
        #             min_values[column] = df[column].min()
 
 
        elif data_type == 'datetime64[ns]':
            date_formats = ['%Y-%m-%d', '%d-%m-%Y']
            regex_pattern = r'^tod{2}-\d{2}-\d{4}$'
            column_values = df[column].dropna().astype(str)
            matching_formats = [format for format in date_formats if all(value.startswith(format) for value in column_values)]
            matching_regex = [value for value in column_values if re.match(regex_pattern, value)]
            if matching_formats or matching_regex:
                data_type = 'DATE '
                Datetype1[column] = df[column].max().strftime('%Y-%m-%d')  # Store maximum value as formatted date
                Datetype2[column] = df[column].min().strftime('%d-%m-%y')  # Store minimum value as formatted date
            else:
                data_type = 'DateTime '
            max_values[column] = df[column].max()  # Store maximum value
            min_values[column] = df[column].min()  # Store minimum value
        max_length_columns[column] = data_type
 
 
 
    # Print words with special characters and their column and row indices
 
    file_name = os.path.basename(file)  # Extracting file name from the path
 
    file_info[file_name] = {'rows': count_rows, 'columns': columns, 'data_types': column_data_types,
                            'max_length_columns': max_length_columns, 'precision_columns': precision_columns,
                            'integer_columns': integer_columns, 'max_values': max_values, 'min_values': min_values}
 
 
 
# Create the output folder if it doesn't exist
 
os.makedirs(output_folder, exist_ok=True)
 
 
 
for file, info in file_info.items():
    output_file_path = os.path.join(output_folder, file.split('.')[0] + '_output.csv')
    with open(output_file_path, 'w') as output_file:
        output_file.write(f"File: {file}\n")
        output_file.write(f"Total Rows: {info['rows']}\n")
        output_file.write(f"Total Columns: {len(info['columns'])}\n")  # Counting the number of columns
        output_file.write("Columns:\n")
        for column in info['columns']:
            data_type = info['data_types'][column]
            if column in info['max_length_columns']:
                data_type = info['max_length_columns'][column]
            output_file.write(f"- {column}: {data_type}")
            if column in info['max_values']:
                max_value = info['max_values'][column]
                output_file.write(f" (Max: {max_value})")
            if column in info['min_values']:
                min_value = info['min_values'][column]
                output_file.write(f" (Min: {min_value}),")
            output_file.write("\n")
print("completed")
print("The files are saved in the folder :",output_folder)